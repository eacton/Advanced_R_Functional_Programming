Advanced R: Functional Programming 
======================================
By Hadley Wickham    
http://adv-r.had.co.nz/Functional-programming.html

Slides by:    
Erica Acton    
March 8, 2017

Functions in R are first class functions. 
========================================================
Functions can be:
- Assigned in variables
- Stored in lists
- Passed as arguments to other functions
- Created inside other functions
- Output by other functions

Building blocks of functional programming:
========================================================

1. Anonymous functions
2. Closures (functions written by functions)
3. Lists of functions

There's the newb way of doing things:
========================================================
Assigning NA values...

```{r, echo=FALSE}
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
```
`
By copying and pasting code umpteen times.
```{r, eval = FALSE}
df$a[df$a == -99] <- NA
df$b[df$b == -99] <- NA
df$c[df$c == -98] <- NA
...
```

And then there's functions!!!
========================================================

```{r, eval==FALSE}
fix_missing <- function(x) {
  x[x == -99] <- NA
  x
}
df[] <- lapply(df, fix_missing)
```
`lapply()` is called a __functional__, because it takes a function as an argument.


This code wins in that:

* It's more compact.
* If the code for a missing value changes, it only needs to be updated in
  one place.
* It works for any number of columns.

Function Composition
========================================================

What if the missing value changes?

```{r}
fix_missing_99 <- function(x) {
  x[x == -99] <- NA
  x
}
fix_missing_999 <- function(x) {
  x[x == -999] <- NA
  x
}
fix_missing_9999 <- function(x) {
  x[x == -999] <- NA
  x
}
```
Copy and paste some more, OR...

Function Composition: Closures
========================================================

```{r}

missing_fixer <- function(na_value) {
  function(x) {
    x[x == na_value] <- NA
    x
  }
}

fix_missing_99 <- missing_fixer(-99)
fix_missing_999 <- missing_fixer(-999)

fix_missing_99(c(-99, -999))
fix_missing_999(c(-99, -999))
```

Alternative: Add an extra argument
=========================================================

```{r}
fix_missing <- function(x, na.value) {
  x[x == na.value] <- NA
  x
}

```

Resolving duplicated arguments 
=========================================================

A data summarizing example:

```{r, eval=FALSE}
summary <- function(x) {
 c(mean(x, na.rm = TRUE),
   median(x, na.rm = TRUE),
   sd(x, na.rm = TRUE),
   mad(x, na.rm = TRUE),
   IQR(x, na.rm = TRUE))
}

lapply(df, summary)
```

Storing Functions in Lists
========================================================

```{r, eval = FALSE}
summary <- function(x) {
  funs <- c(mean, median, sd, mad, IQR)
  lapply(funs, function(f) f(x, na.rm = TRUE))
}
```

Anonymous Functions: Like that Goldfish that won't be around long enough to name
========================================================

```{r, eval = FALSE}
lapply(mtcars, function(x) log2(x))

```
One of the most common uses for anonymous functions is to create closures, functions made by other functions.

Review
=========================================================

Like other functions, anonymous functions have `formals()`, a `body()`, and a parent `environment()`:

```{r}
formals(function(x = 4) g(x) + h(x))
body(function(x = 4) g(x) + h(x))
environment(function(x = 4) g(x) + h(x))
```



Exercises:
==============================================================================
1. Given a function, like `"mean"`, `match.fun()` lets you find a function. 
   Given a function, can you find its name? Why doesn't that make sense in R?

2. Use `lapply()` and an anonymous function to find the coefficient of 
   variation for all columns in the `mtcars` dataset.

3. Use `integrate()` and an anonymous function to find the area under the 
   curve for the following functions. 
   Use [Wolfram Alpha](http://www.wolframalpha.com/) to check your answers.

    1. `y = x ^ 2 - x`, x in [0, 10]
    2. `y = sin(x) + cos(x)`, x in [-$\pi$, $\pi$]
    3. `y = exp(x) / x`, x in [10, 20]
    
Exercises (cont'd):
=============================================================================

4. A good rule of thumb is that an anonymous function should fit on one line 
   and shouldn't need to use `{}`. Review your code. Where could you have 
   used an anonymous function instead of a named function? Where should you 
   have used a named function instead of an anonymous function?
   
Closures: Functions written by Functions
=========================================================================

Closures get their name because they __enclose__ the environment of the parent function and can access all its variables. This is useful because it allows us to have two levels of parameters: a parent level that controls operation and a child level that does the work.
```{r}
power <- function(exponent) {
  function(x) {
    x ^ exponent
  }
}

```


Generating a family of power functions
===========================================

```{r}
square <- power(2)
square(2)
square(4)

cube <- power(3)
cube(2)
```

What is the function? 
===============================================================

```{r}
square
cube
```

What is the enclosing environment?
===============================================================
```{r}
as.list(environment(square))
as.list(environment(cube))
```


FYI: Parent Environments
==============================================================
The parent environment of a closure is the execution environment of the function that created it, as shown by this code:

```{r}
power <- function(exponent) {
  print(environment())
  function(x) x ^ exponent
}
zero <- power(0)
environment(zero)
```
FYI: Parent Environments
==============================================================
The execution environment normally disappears after the function returns a value. However, functions capture their enclosing environments. This means when function a returns function b, function b captures and stores the execution environment of function a, and it doesn't disappear. This has important consequences for memory use.

Function Factories
==============================================================
The power function would be a simple example, however function factories usually more than a single argument.

* The different levels are more complex, with multiple arguments and 
  complicated bodies.

* Some work only needs to be done once, when the function is generated.

Function factories are particularly well suited to maximum likelihood problems, and you'll see a more compelling use of them in mathematical functionals.

Mutable State
==============================================================
Having variables at two levels allows you to maintain state across function invocations. 
- the execution environment is refreshed every time 
- the enclosing environment is constant

(`<-`)  always assigns in the current environment
(`<<-`) will keep looking up the chain of parent environments until it finds a matching name

Together, a static parent environment and `<<-` make it possible to maintain state across function calls. 

Example with the double assignment operator
==================================================
A counter records how many times a function has been called. Each time `new_counter` is run, it creates an environment, initialises the counter `i` in this environment, and then creates a new function.

```{r}
new_counter <- function() {
  i <- 0
  function() {
    i <<- i + 1
    i
  }
}
```

The new function is a closure, and its enclosing environment is the environment created when `new_counter()` is run. Ordinarily, function execution environments are temporary, but a closure maintains access to the environment in which it was created. 

Example (cont'd)
==================================================================
In the example below, closures `counter_one()` and `counter_two()` each get their own enclosing environments when run, so they can maintain different counts.

```{r}
counter_one <- new_counter()
counter_two <- new_counter()
counter_one()
counter_one()

```
====================================================================
```{r}
counter_two()
```


What do we expect from the following functions?
======================================================================

```{r}
i <- 0
new_counter2 <- function() {
  i <<- i + 1
  i
}
new_counter3 <- function() {
  i <- 0
  function() {
    i <- i + 1
    i
  }
}
```

Exercises
===================================================================

-  What does the following statistical function do? What would be a better 
    name for it? (The existing name is a bit of a hint.)

```{r}
    bc <- function(lambda) {
      if (lambda == 0) {
        function(x) log(x)
      } else {
        function(x) (x ^ lambda - 1) / lambda
      }
    }
```

-  What does `approxfun()` do? What does it return?

-  What does `ecdf()` do? What does it return?

Exercises (con'td)
===================================================================

-  Create a function that creates functions that compute the ith 
    [central moment](http://en.wikipedia.org/wiki/Central_moment) of a numeric vector. You can test it by running the following code:

```{r, eval = FALSE}
    m1 <- moment(1)
    m2 <- moment(2)

    x <- runif(100)
    stopifnot(all.equal(m1(x), 0))
    stopifnot(all.equal(m2(x), var(x) * 99 / 100))
    
```

-  Create a function `pick()` that takes an index, `i`, as an argument and 
    returns a function with an argument `x` that subsets `x` with `i`.

```{r, eval = FALSE}
    lapply(mtcars, pick(5))
    # should do the same as this
    lapply(mtcars, function(x) x[[5]])
```

Lists of Functions
==============================================================
Useful when working with a group of related functions, such as comparing the performance of multiple ways of computing the arithmetic mean. You could do this by storing each approach (function) in a list:

```{r}
compute_mean <- list(
  base = function(x) mean(x),
  sum = function(x) sum(x) / length(x),
  manual = function(x) {
    total <- 0
    n <- length(x)
    for (i in seq_along(x)) {
      total <- total + x[i] / n
    }
    total
  }
)
```
Calling a function from a list
=========================================================

Individually:

```{r, eval=FALSE}
x <- runif(1e5)
system.time(compute_mean$base(x))
system.time(compute_mean[[2]](x))
system.time(compute_mean[["manual"]](x))
```
Altogether:

```{r, eval=FALSE}
lapply(compute_mean, function(f) system.time(f(x)))
```

Moving lists of functions to the global environment
=============================================================

The following example uses a function factory to create functions for the tags `<p>` (paragraph), `<b>` (bold), and `<i>` (italics). The functions in a list because I don't want them to be available all the time. The risk of a conflict between an existing R function and an HTML tag is high.

```{r}
simple_tag <- function(tag) {
  force(tag)
  function(...) {
    paste0("<", tag, ">", paste0(...), "</", tag, ">")
  }
}
tags <- c("p", "b", "i")
html <- lapply(setNames(tags, tags), simple_tag)
```

3 Solutions to access lists of functions
==========================================================
Keeping functions in a list makes code more verbose:

```{r}
html$p("This is ", html$b("bold"), " text.")
```

To eliminate the use of `html$`:

- For a very temporary effect, you can use `with()` (RECOMMENDED): 

    ```{r}
    with(html, p("This is ", b("bold"), " text."))
    ```

3 Solutions to access lists of functions 
==========================================================

-  For a longer effect, you can `attach()` the functions to the search path, 
  then `detach()` when you're done:

    ```{r}
    attach(html)
    p("This is ", b("bold"), " text.")
    detach(html)
    ```
3 Solutions to access lists of functions 
==========================================================
- Finally, you could copy the functions to the global environment with 
  `list2env()`. You can undo this by deleting the functions after you're done.
  \indexc{list2env()}

    ```{r}
    list2env(html, environment())
    p("This is ", b("bold"), " text.")
    rm(list = names(html), envir = environment())
    ```

Exercises
==============================================================

1.  Implement a summary function that works like `base::summary()`, but uses a 
    list of functions. Modify the function so it returns a closure, making it 
    possible to use it as a function factory.

1. Which of the following commands is equivalent to `with(x, f(z))`?

    (a) `x$f(x$z)`    
    (b) `f(x$z)`    
    (c) `x$f(z)`    
    (d) `f(z)`    
    (e) It depends

Case Study: Numerical Integration 
=============================================================
AKA Too Much Math for 4pm

-Test 2 methods for AUC - trapezoid and midpoint    

-Try composite integration    

-Reduce duplication in code    

-End up with a function to integrate and an integration rule

Even More Exercises
=============================================================


1.  Instead of creating individual functions (e.g., `midpoint()`, 
      `trapezoid()`, `simpson()`, etc.), we could store them in a list. If we 
    did that, how would that change the code? Can you create the list of 
    functions from a list of coefficients for the Newton-Cotes formulae?

1.  The trade-off between integration rules is that more complex rules are 
    slower to compute, but need fewer pieces. For `sin()` in the range 
    [0, $\pi$], determine the number of pieces needed so that each rule will 
    be equally accurate. Illustrate your results with a graph. How do they
    change for different functions? `sin(1 / x^2)` is particularly challenging.
